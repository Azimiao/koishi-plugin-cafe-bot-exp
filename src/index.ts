import { Context, Random, Schema, segment } from 'koishi'
import { Config } from './config';
import { DailySeededName } from './DailySeededName';
import PseudoRandom from './PseudoRandom';
import HtmlCreator from './templete/html';

import * as fs from 'fs/promises';
import * as path from 'path';
import fsExists from "fs.promises.exists";

// TODO: ÊîπÊàêËøúÁ´ØÂä†ËΩΩÂπ∂Â≠òÂà∞Êú¨Âú∞
let cafebotCardData = [];

export const name = 'cafe-bot-exp'

export const inject = ['http'];

export * from "./config";


const catWords = [
    "ÂñµÂëÄÂëúÔΩû ",
    "ÂñµÂëÄÔΩûÂëµ", // Ëµ∞ËøôËæπ„ÄÇÔºàÂ∏¶Ë∑ØÊó∂Ôºâ
    "ÂñµÂëÄÔΩûÔΩûÂô¢", // ËØ¥ÂæóÊ≤°Èîô„ÄÇÂ∞±ÊòØËøôÊ†∑„ÄÇ
    "ÂñµÂëÄÔΩûÂòéÔΩû", // È´òÂÖ¥ÁöÑË°®Áé∞„ÄÇ
    "ÂñµÂëÄÔΩûÔΩûÂëµ", // Á®çÁ≠â‰∏Ä‰∏ã„ÄÇÔºàÂºïËµ∑Ê≥®ÊÑèÔºâ
    "ÂñµÂòé", // Áà™Â≠êÁóíÁóí‰∫Ü„ÄÇÔºàÁÑ¶Ë∫Å‰∏çÂÆâÔºâ
    "ÂñµÂòéÔΩûÔΩû ", // ËÇöÂ≠êÈ•ø‰∫Ü„ÄÇ
    "ÂñµÂòéÂëúÔΩûÔΩû", // Ë≠¶ÊàíÁöÑË°®Áé∞„ÄÇ
    "ÂñµÂëú", // Âõ∞‰∫Ü„ÄÇ‰πè‰∫Ü„ÄÇÁ¥Ø‰∫Ü„ÄÇ
    "ÂñµÂëúÔºü", // ÊÇ®ÊòØÂì™‰ΩçÔºü
    "ÂñµÂëú‚Äî", // ÊòØÁöÑ„ÄÇ
    "ÂñµÂô¢Ôºü", // ÊÄé‰πà‰∫ÜÔºü
    "Âñµ‚ÄîÂô¢", // Âë¶ÔºåÂèàËßÅÈù¢‰∫Ü„ÄÇ ÔºàÁü≠ÊúüÂÜÖÂÜç‰ºöÊó∂ÁöÑÊãõÂëºÔºâ
    "Âñµ‚ÄîÂëµ", // Â•Ω‰πÖ‰∏çËßÅ‰∫Ü„ÄÇËøòÂ•ΩÂêóÔºü
    "ÂñµÔΩûÂëú", // ÂÜçËßÅ
    "ÂñµÔΩûÂô¢", // ÊòØÔºåÂ∞±ÊòØËøôÊ†∑„ÄÇÔºàÂº∫ÁÉàËÇØÂÆöÔºâ
    "ÂñµÔΩûÔΩûÂëµ", // ‰Ω†Â•Ω„ÄÇ
    "ÂëúÂí™ÂòéÔΩû ", // ÊâìÂìàÊ¨†„ÄÇ
    "Âí™ÂëúÔºü", // ‰Ω†ËØ¥‰ªÄ‰πàÔºüÔºàÂê¨Âà∞ÂùèËØùÂèçÈóÆÁöÑËØ≠Ê∞îÔºâ
    "Âí™ÔΩûÂëú ", // ËÇöÂ≠êÈ•ø‰∫Ü„ÄÇÔºàÂπºÁå´ËØ≠Ôºâ
    "Âí™ÔΩûÔΩûÂëµ" // ÂØπ‰∏çËµ∑
];

const animals = ["ÁëüËïæÂ•¥", "ÂèØÈ≤ÅË¥ùÊ¥õÊñØ", "Êç∑Ê¨ß", "Âü∫Â∫ì", "Ëî°Áâπ", "ÊüØË¥ù", "Âè§Âà©‰∫öËØ∫ÊñØ", "Â∞èÊòü", "ÂΩ±ËâØ", "fio", "xeros"];
const starEnum = [
    5, 4, 3, 2, 1
];

// ÂØπÊï∞ÁªÑËøõË°å‰º™ÈöèÊú∫ÊéíÂàó
function shuffleWithCustomRandom(array, rand) {
    for (let i = array.length - 1; i > 0; i--) {
        const a = rand();
        const j = Math.floor(a * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
}

let star2Name = null;


async function downloadCardDataIfNotExist(ctx: Context,config: Config){
    if(cafebotCardData != null && cafebotCardData.length > 0){
        return;
    }
    const root = path.join(ctx.baseDir, 'data', 'cafe-bot-exp-data')
    await fs.mkdir(root, { recursive: true });
    const cardFilePath = path.join(root,'card.json');
    var a = await fsExists(cardFilePath);

    if(!a){
        console.log(`card data ${cardFilePath} not exist,try download from ${config.baseDataUrl}`);

        // download card file
        await ctx.http.get(config.baseDataUrl).then(async (res)=>{
            await fs.writeFile(cardFilePath,JSON.stringify(res));
        });
    }

    var fileContent = await fs.readFile(cardFilePath,"utf-8");
    try {
        cafebotCardData = JSON.parse(fileContent);
    } catch (error) {
        throw new Error("Card read error");
    }
    return;
}

async function getCards(seed, ctx, config) {

    await downloadCardDataIfNotExist(ctx,config);

    let minCount = config.MinCount;
    let maxCount = config.MaxCount;
    let randomer = new PseudoRandom(seed);
    let drawTime = randomer.nextInt(minCount,maxCount);
    let cardDataCache = [...cafebotCardData];
    let cardDataRandom = shuffleWithCustomRandom(cardDataCache, randomer.next);


    const allChanges = [
        config.Star5Chance,
        config.Star4Chance,
        config.Star3Chance,
        config.Star2Chance,
        config.Star1Chance
    ];
    if (star2Name == null) {
        star2Name = {
            "1": config.Star1Name,
            "2": config.Star2Name,
            "3": config.Star3Name,
            "4": config.Star4Name,
            "5": config.Star5Name
        };

    }
    const groupedByStar = {};

    cardDataRandom.forEach(char => {
        const star = char.star;
        if (!groupedByStar[star]) {
            groupedByStar[star] = [];
        }
        groupedByStar[star].push(char);
    });


    let result = [];
    for (let i = 0; i < drawTime; i++) {
        let randomNumber = randomer.next();
        let selectStarGroup = -999;
        for (let starGroup = 0; starGroup < allChanges.length; starGroup++) {
            if (randomNumber < allChanges[starGroup]) {
                selectStarGroup = 5 - starGroup;
                break;
            }
        }

        if (selectStarGroup > 0 && groupedByStar != null && groupedByStar[selectStarGroup]) {
            let nowGroupData = groupedByStar[selectStarGroup];
            let pickUpNumber =  randomer.nextInt(0,nowGroupData.length - 1);
            let card = nowGroupData[pickUpNumber];
            card.starText = star2Name[card.star];
            if (!result.includes(card)) {
                result.push(card);
            }
        }
    }
    return result;
}

function At(argv, newLine = true) {
    let AtStr = (argv.session && !argv.session.isDirect) ? `${segment.at(argv.session.userId)}${newLine ? "\r\n" : ""}` : "";
    return AtStr;
}


export async function apply(ctx: Context, config: Config) {

    downloadCardDataIfNotExist(ctx,config);

    ctx.command("ÂÖ≥‰∫é", "about").action(async (argv, _) => {
        argv.session?.send(`ÊàëÊòØËΩ®ËøπCafeÁæ§ËÅäÊú∫Âô®‰∫∫Ê¶ÇÂøµÁâà~`);
    });

    ctx.command('ËΩ®ËøπÊäΩÂç°/ÁªôÊàëÊäΩ', "ËøõË°åÊØèÊó•ÊäΩÂç°").action(async (argv, _) => {
        let seed = DailySeededName(argv.session.userId);
        console.log(`getcard for ${seed}`);
        let randomer = new PseudoRandom(seed);
        let result = await getCards(seed,ctx, config);

        if (result.length <= 0) {
            let msg = "‰Ω†Âπ∂‰∏çÊòØÊú¨Áæ§ÈôêÂÆöÈùûÈÖã, Âè™‰∏çËøáÊäΩÂà∞ÁöÑÂç°ÁâåË¢´" + animals[randomer.nextInt(0,animals.length - 1)] + "ÂèºËµ∞‰∫Ü~\n";
            console.log(`getcard for ${seed} is empty,send it`);
            await argv.session?.send(`${At(argv)}${msg}`);
            return;
        }

        let resultParse = {};
        result.forEach(element => {
            if (!resultParse[element.star]) {
                resultParse[element.star] = [];
            }
            resultParse[element.star].push(element);
        });

        let msg = `${At(argv)}‰ªäÊó•ÊäΩÂà∞ÁöÑÂç°Áâå:\n`;
        starEnum.forEach(starCount => {
            if (resultParse[starCount]) {
                msg += `${star2Name[starCount]}\n`;
                resultParse[starCount].forEach(card => {
                    msg += `-${card.name}\n`;
                });
            }
        })
        await argv.session?.send(msg);
        console.log(`getcard for ${seed} send ok`);
        return;
    });

    // Èò≤Êäñ
    const requestWebCache = {};

    ctx.command('ËΩ®ËøπÊäΩÂç°/ÁªôÊàëÊäΩÂõæ', "ËøõË°åÊäΩÂç°Âπ∂ÊòæÁ§∫Âç°ÁâåÂõæÁâá").action(async (argv, _) => {

        let seed = DailySeededName(argv.session.userId);
        console.log(`getcard img for ${seed}`);

        let randomer = new PseudoRandom(seed);
        let result = await getCards(seed, ctx,config);

        if (result.length <= 0) {
            let msg = "‰Ω†Âπ∂‰∏çÊòØÊú¨Áæ§ÈôêÂÆöÈùûÈÖã, Âè™‰∏çËøáÊäΩÂà∞ÁöÑÂç°ÁâåË¢´" + animals[randomer.nextInt(0,animals.length - 1)] + "ÂèºËµ∞‰∫Ü~\n"
            await argv.session?.send(`${At(argv)} ${msg}`);
            console.log(`getcard img for ${seed} is empty`);
            return;
        }

        if(requestWebCache[seed]){
            await argv.session?.send(`${At(argv)} ËØ∑Á≠âÂæÖ‰∏äÊ¨°ÊäΩÂèñÂÆåÊàêÂì¶~`);
            console.log(`getcard img for ${seed}, another request is processing, send please wait`);
            return;
        }

        requestWebCache[seed] = "waiting";

        await argv.session?.sendQueued(`${At(argv)} ÊäΩÂèñ‰∏≠,ËØ∑Á®çÂÄô...`);
        console.log(`getcard img for ${seed} is processing, send please wait`);

        var a = HtmlCreator(result);

        

        await ctx.http.post(
            config.ImageServer,
            {
                html: a,
                auth: config.ImageServerAuth,
                filename: seed,
            },
            {
                responseType: "json"
            }
        ).then(async (res) => {
            delete requestWebCache[seed];
            await argv.session?.sendQueued(`${At(argv)}<img src="${res.data}"/>`);
            await argv.session?.cancelQueued();
            console.log(`getcard img for ${seed} send ok~`);
        }).catch(async (e) => {
            delete requestWebCache[seed];
            await argv.session?.sendQueued(`${At(argv)}ÂõæÁâáÁîüÊàêÂ§±Ë¥•`);
            await argv.session?.cancelQueued();
            console.log(`getcard img for ${seed} is failed, send create failed`);
        })
        return;
    });

    ctx.command("ÈªëÁå´ÊüØË¥ù/Êë∏Áå´", "Êë∏Êë∏ÊüØË¥ù").action(async (argv, _) => {
        // let userId = argv.session?.userId;
        const random = new Random(() => Math.random());
        let catWord = random.pick(catWords);
        argv.session?.send(`${At(argv)}üê±:${catWord}`);
    });
}
